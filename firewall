#!/bin/bash
#
# Firewall using iptables
#
# Copyright (c) T. Zengerink
# Lisenced under MIT Lisence
# Visit: https://raw.github.com/Mytho/iptables-firewall/master/license.txt

set -e
DIR="$(cd "$(dirname $0)" && pwd)"
IPT="$(which iptables)"
CNF="$DIR/firewall.conf"
WL="$DIR/firewall.whitelist"
BL="$DIR/firewall.blacklist"

if [ ! -f $CNF ]; then
	echo "Unable to load configuration file ($CNF)... Exiting"
	exit 0
fi
if [ ! -f $WL ]; then
	echo "Unable to load whitelist file ($WL)... Exiting"
	exit 0
fi
if [ ! -f $BL ]; then
	echo "Unable to load whitelist file ($WL)... Exiting"
	exit 0
fi
source $CNF

## -- FLUSH --------------------------------------------------------------------

flush_firewall()
{
	$IPT -F
	$IPT -X
}

## -- START --------------------------------------------------------------------

start_firewall()
{
	$IPT -N LOGDROP
	$IPT -N TCP
	$IPT -N UDP
	$IPT -P FORWARD DROP
	$IPT -P OUTPUT ACCEPT
	$IPT -P INPUT DROP
	
	## -- LOGDROP -- ##

	$IPT -A LOGDROP -m limit --limit 5/m --limit-burst 10 -j LOG
	$IPT -A LOGDROP -j DROP

	## -- TCP -- ##

	# Trick portscanners
	$IPT -I TCP -p tcp -m recent --update --seconds 60 --name TCP-PORTSCAN -j REJECT --reject-with tcp-rst

	# Log and drop all traffic from blacklisted sources 
	for SRC in `grep -v ^# $BL | awk '{print $1}'`; do
		$IPT -A TCP -p tcp -s $SRC -j LOGDROP
	done

	# Accept all traffic from whitelisted sources 
	for SRC in `grep -v ^# $WL | awk '{print $1}'`; do
		for PORT in $WHITELIST_OPEN_TCP; do
			$IPT -A TCP -p tcp -s $SRC --dport $PORT -j ACCEPT
		done
	done

	# Accept all traffic on open ports
	for PORT in $OPEN_TCP; do
		$IPT -A TCP -p tcp --dport $PORT -j ACCEPT
	done

	## -- UDP -- ##

	# Trick portscanners
	$IPT -I UDP -p udp -m recent --update --seconds 60 --name UDP-PORTSCAN -j REJECT --reject-with port-unreach

	# Log and drop all traffic from blacklisted sources 
	for SRC in `grep -v ^# $BL | awk '{print $1}'`; do
		$IPT -A UDP -p udp -s $SRC -j LOGDROP
	done

	# Accept all traffic from whitelisted sources 
	for SRC in `grep -v ^# $WL | awk '{print $1}'`; do
		for PORT in $WHITELIST_OPEN_UDP; do
			$IPT -A UDP -p udp -s $SRC --dport $PORT -j ACCEPT
		done
	done

	# Accept all traffic on open ports
	for PORT in $OPEN_UDP; do
		$IPT -A UDP -p udp --dport $PORT -j ACCEPT
	done

	## -- INPUT -- ##

	# Initial setup
	$IPT -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
	$IPT -A INPUT -i lo -j ACCEPT
	$IPT -A INPUT -m conntrack --ctstate INVALID -j LOGDROP
	$IPT -A INPUT -p icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT

	# Send new TCP / UDP connections through their own chain
	$IPT -A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP
	$IPT -A INPUT -p udp -m conntrack --ctstate NEW -j UDP

	# Reject different protocols with sending a nice message
	$IPT -A INPUT -p tcp -m recent --set --name TCP-PORTSCAN -j REJECT --reject-with tcp-rst
	$IPT -A INPUT -p udp -m recent --set --name UDP-PORTSCAN -j REJECT --reject-with icmp-port-unreachable
	$IPT -A INPUT -j REJECT --reject-with icmp-proto-unreachable
}

## -- STATUS -------------------------------------------------------------------

status_firewall()
{
	$IPT -vnL
}

## -- STOP ---------------------------------------------------------------------

stop_firewall()
{
	$IPT -P INPUT ACCEPT
	$IPT -P FORWARD ACCEPT
	$IPT -P OUTPUT ACCEPT
}

## -- EXECUTE ------------------------------------------------------------------

case "$1" in
	flush)
		flush_firewall
		;;
	start|restart)
		flush_firewall
		start_firewall
		;;
	status)
		status_firewall
		;;
	stop)
		flush_firewall
		stop_firewall
		;;
	*)
		echo -e "Usage: $0 [flush|restart|start|status|stop]"
		exit 1
esac

exit 0
